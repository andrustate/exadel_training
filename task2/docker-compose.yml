# Файл docker-compose должен начинаться с тега версии.
# Мы используем "3" так как это - самая свежая версия на момент написания этого кода.

version: '2.0'

# Следует учитывать, что docker-composes работает с сервисами.
# 1 сервис = 1 контейнер.
# Сервисом может быть клиент, сервер, сервер баз данных...
# Раздел, в котором будут описаны сервисы, начинается с 'services'.

services:

#-------------------------------------------------------------------------------------

# Первый сервис (контейнер): сервер.
# Назвать его можно так, как нужно разработчику.
# Понятное название сервиса помогает определить его роль.
 serverng:
#Ключевое слово "build" позволяет задать
# путь к файлу Dockerfile, который нужно использовать для создания образа,
# который позволит запустить сервис.
  build: serverng/
# Команда, которую нужно запустить после создания образа.
# Cледующая команда означает запуск "nginx".
#command: nginx -g daemon off
# Вспомните о том, что в качестве порта в 'nginx' указан порт 80.
# Если мы хотим обратиться к серверу находясь за пределами контейнера,
# мы должны организовать перенаправление этого порта на порт компьютера.
# Сделать это нам поможет ключевое слово 'ports'.
# При его использовании применяется следующая конструкция: 
#[порт компьютера]:[порт контейнера]
# В нашем случае нужно использовать порт компьютера 80 и организовать его связь 
#с портом 80 контейнера (так как именно на этот порт сервер 
# ожидает поступления запросов).
  ports:
  - 80:80

#-------------------------------------------------------------------------------------

# Второй сервис (контейнер): клиент.
# Этот сервис назван 'clientjv'.
 clientjv:
# Здесь clientjv/ соответствует пути к папке, которая содержит
# файл Dockerfile для клиентской части системы.
  build: clientjv/
#  ports: -8080:8080 
# Команда, которую нужно запустить после создания образа.
# Ключевое слово 'network_mode' используется для описания типа сети.
# Тут мы указываем то, что контейнер может обращаться к 'localhost' компьютера.
#network_mode: host
# Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
# прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
# Нам нужно, чтобы сервис 'client' дождался бы готовности к работе сервиса 'server'.
  depends_on:
  - databasepg
#  restart: always

#-------------------------------------------------------------------------------------

 databasepg:
  build: databasepg/
  ports:
  - 5432:5432
# restart: always